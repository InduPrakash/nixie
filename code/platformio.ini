[platformio]
default_envs = nixie
#wemos-d1mini-relayshield
src_dir = espurna
data_dir = espurna/data

[common]
# ------------------------------------------------------------------------------
# PLATFORM:
#   !! DO NOT confuse platformio's ESP8266 development platform with Arduino core for ESP8266
#   We use Arduino Core 2.3.0 (platformIO 1.5.0) as default
#
#   arduino core 2.3.0 = platformIO 1.5.0
#   arduino core 2.4.0 = platformIO 1.6.0
#   arduino core 2.4.1 = platformIO 1.7.3
#   arduino core 2.4.2 = platformIO 1.8.0
#   arduino core 2.5.0 = platformIO 2.0.4
#   arduino core 2.5.1 = platformIO 2.1.1
#   arduino core 2.5.2 = platformIO 2.2.2
# ------------------------------------------------------------------------------
arduino_core_2_3_0 = espressif8266@1.5.0
arduino_core_2_4_0 = espressif8266@1.6.0
arduino_core_2_4_1 = espressif8266@1.7.3
arduino_core_2_4_2 = espressif8266@1.8.0
arduino_core_2_5_0 = espressif8266@2.0.4
arduino_core_2_5_1 = espressif8266@2.1.1
arduino_core_2_5_2 = espressif8266@2.2.2

# Development platforms
arduino_core_develop = https://github.com/platformio/platform-espressif8266#develop
arduino_core_git = https://github.com/platformio/platform-espressif8266#feature/stage

platform = ${common.arduino_core_2_3_0}
platform_latest = ${common.arduino_core_2_5_2}

# ------------------------------------------------------------------------------
# FLAGS: DEBUG
#
# ------------------------------------------------------------------------------
debug_flags = -DDEBUG_ESP_CORE -DDEBUG_ESP_SSL -DDEBUG_ESP_WIFI -DDEBUG_ESP_HTTP_CLIENT -DDEBUG_ESP_HTTP_UPDATE -DDEBUG_ESP_HTTP_SERVER -DDEBUG_ESP_UPDATER -DDEBUG_ESP_OTA -DDEBUG_TLS_MEM
#if needed (for memleaks etc) also add; -DDEBUG_ESP_OOM -include "umm_malloc/umm_malloc_cfg.h"

# ------------------------------------------------------------------------------
# FLAGS: build flags
#   build flags for 512k/1m ESP's are different because we use Linker Scripts to adjust flash split
#    build_flags_512k ( 512 KB) =  487 KB sketch,  4 KB eeprom, 16 KB reserved
#    build_flags_1m0m (1024 KB) =  999 KB sketch,  4 KB eeprom, 16 KB reserved
#    build_flags_2m1m (2048 KB) = 1019 KB sketch, 16 KB eeprom,  992 KB spiffs, 16 KB reserved
#    build_flags_4m1m (4096 KB) = 1019 KB sketch, 16 KB eeprom,  992 KB spiffs, 16 KB reserved, 2048 KB empty/ota?
#    build_flags_4m3m (4096 KB) = 1019 KB sketch, 16 KB eeprom, 3040 KB spiffs, 16 KB reserved
#
# Available lwIP variants (macros):
#    -DPIO_FRAMEWORK_ARDUINO_LWIP_HIGHER_BANDWIDTH  = v1.4 Higher Bandwidth (default)
#    -DPIO_FRAMEWORK_ARDUINO_LWIP2_LOW_MEMORY       = v2 Lower Memory
#    -DPIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH = v2 Higher Bandwidth
#
# BearSSL ciphers:
#   When building on core >= 2.5, you can add the build flag -DBEARSSL_SSL_BASIC in order to build BearSSL with a limited set of ciphers:
#     TLS_RSA_WITH_AES_128_CBC_SHA256 / AES128-SHA256
#     TLS_RSA_WITH_AES_256_CBC_SHA256 / AES256-SHA256
#     TLS_RSA_WITH_AES_128_CBC_SHA / AES128-SHA
#     TLS_RSA_WITH_AES_256_CBC_SHA / AES256-SHA
#  This reduces the OTA size with ~45KB, so it's especially useful on low memory boards (512k/1m).
# ------------------------------------------------------------------------------
board_1m = esp01_1m
board_2m = esp_wroom_02
board_4m = esp12e

build_flags = -g -w -DMQTT_MAX_PACKET_SIZE=1024 -DNO_GLOBAL_EEPROM ${sysenv.ESPURNA_FLAGS} -DPIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH
build_flags_512k = ${common.build_flags} -Wl,-Teagle.flash.512k0m1s.ld
build_flags_1m0m = ${common.build_flags} -Wl,-Teagle.flash.1m0m1s.ld
build_flags_2m1m = ${common.build_flags} -Wl,-Teagle.flash.2m1m4s.ld
build_flags_4m1m = ${common.build_flags} -Wl,-Teagle.flash.4m1m4s.ld
build_flags_4m3m = ${common.build_flags} -Wl,-Teagle.flash.4m3m4s.ld

shared_libdeps_dir = libraries/

# ------------------------------------------------------------------------------
# OTA:
# ------------------------------------------------------------------------------
ota_upload_port = "${sysenv.ESPURNA_IP}"
ota_upload_flags = --auth="${sysenv.ESPURNA_AUTH}"
ota_upload_protocol = espota

# ------------------------------------------------------------------------------
# COMMON SETTINGS:
# ------------------------------------------------------------------------------
[env]
platform = ${common.platform}
framework = arduino
board_build.flash_mode = dout
monitor_speed = 115200
upload_speed = 115200
extra_scripts = pre:extra_script_pre.py, extra_scripts.py
lib_extra_dirs =
    ${common.shared_libdeps_dir}

# ------------------------------------------------------------------------------
# LIBRARIES: required dependencies
#   Please note that we don't always use the latest version of a library.
# ------------------------------------------------------------------------------
lib_deps =
    ArduinoJson@5.13.4
    https://github.com/marvinroger/async-mqtt-client#v0.8.1
    https://github.com/xoseperez/eeprom_rotate#0.9.2
    Embedis
    https://github.com/me-no-dev/ESPAsyncTCP#7e9ed22
    https://github.com/me-no-dev/ESPAsyncWebServer#b0c6144
    https://github.com/xoseperez/justwifi.git#2.0.2
    https://github.com/madpilot/mDNSResolver#4cfcda1
    https://github.com/xoseperez/NtpClient.git#0942ebc
    https://github.com/xoseperez/Time
lib_ignore =


[env:nixie]
board = ${common.board_4m}
build_flags = ${common.build_flags_4m1m} -DNIXIE -DNOWSAUTH
